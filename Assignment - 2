Chapter-2 Assignment - Igniting our App

Q1.	What is NPM?
Ans-	NPM stands for Node Package Manager. It is used for installing dependencies packages for our react app and other libraries to ignite our app.

Q2.	What is ‘Parcel/Webpack’? Why do we need it?
Ans-	Parcel is a bundler used for our react app and also has so much power that it adds extra features in our app. We need Parcel to maximize our app capability and responsiveness.

Q3.	What is ‘.parcel-cache’?
Ans- 	The .parcel-cache stores information about your project when parcel builds it, so that when it rebuilds, it doesn't have to re-parse and re-analyze everything from scratch. It's a key reason why parcels can be so fast in development mode.

Q4.	What is ‘npx’?
Ans-	The npx stands for Node Package Execute and it comes with the npm, when you installed npm above 5.2.0 version then automatically npx will be installed. It is an npm package runner that can execute any package that you want from the npm registry without even installing that package.

Q5.	What is the difference between ‘dependencies’ vs ‘devDependencies’?
Ans-	Dependency is an object that contains the library, which your project requires for production environments and functioning effectively. devDependencies are those packages in the package. json file that you need only for project development purposes. Example- Babel, Webpack, etc.

Q6.	What is Tree Shaking?
Ans-	Tree shaking is a term commonly used within a JavaScript context to describe the removal of dead code. It relies on the import and export statements to detect if code modules are exported and imported for use between JavaScript files.

Q7.	What is Hot Module Replacement?
Ans-	Hot Module Replacement (HMR) exchanges, adds, or removes modules while an application is running, without a full reload. This can significantly speed up development in a few ways: Retain application state which is lost during a full reload. Save valuable development time by only updating what's changed.

Q8.	List down your favorite 5 superpowers of Parcel and describe any 3 of them in your own words?
Ans-	The best 5 superpowers in my opinion are as below
Auto install dependencies
File Watcher Algorithm
Hot Module Replacement
Compatible with older version of Browsers
Caching while development
1.	Hot Module Replacement (HMR). HMR improves the development experience by updating modules in the browser at runtime without needing a whole page refresh. This means that application state can be retained as you change small things in your code.

2.	Caching - Parcel caches everything it builds to disk. If you restart the dev server, Parcel will only rebuild files that have changed since the last time it ran. Parcel automatically tracks all of the files, configuration, plugins, and dev dependencies that are involved in your build, and granularly invalidates the cache when something changes. For example, if you change a configuration file, all of the source files that rely on that configuration will be rebuilt.

3.	File Watcher - To support an optimal caching and development experience Parcel utilizes a very fast watcher written in C++ that integrates with low-level file watching functionality of each operating system. Using this watcher Parcel watches every file in your project root (including all node_modules). Based on events and metadata from these files, Parcel determines which files need to be rebuilt.

4.	Auto Install - When you use a language or plugin that isn’t included by default, Parcel will automatically install the necessary dependencies into your project for you. For example, if you include a .sass file, Parcel will install the @parcel/transformer-sass plugin. When this happens, you'll see a message in the terminal, and the new dependency will be added to the devDependencies in your package.json.

Q9.	What is ‘.gitignore’? What should we add or not add into it?
Ans-	A .gitignore file in project root folder tells Git, what all files to ignore from tracking. Here is a list that can be included in .gitignore file in a normal React project.
node_modules/ folder need not be pushed to Git server. It will be big and unnecessary to push it. All the package details are there in package.json file. We only need that file to be pushed to Git server to later build and run the application.
.cache/ is added to ignore temporary cache files generated by bundlers. If, for your bundler like Parcel or Webpack, the cache name is different, rename this folder name in .gitignore.
dist/ is the common name to store the output of a build process. We do not have to push the output of a build to Git. If we need to deploy the app, we take a fresh build at that time from source files.
.env contains secure environment variables and values. We do not want it to be shared with others.
coverage/ folder is generated as part of code coverage testing. That need not be there in the Git.

.vscode/ folder is created by Visual Studio Code IDE. It stores project specific settings. We do not want this folder to be pushed to Git server.
Q12.	What is the difference between ‘package.json’ and ‘package-lock.json’?
Ans-	In Node.js, package.json is a versioning file used to install multiple packages in your project. As you initialize your node application, you will see three files installed in your app that are node_modules, package.json, and package.lock.json.
a package.json file contains metadata about the project and also the functional dependencies that are required by the application.
package.lock.json is created for locking the dependency with the installed version. It will install the exact latest version of that package in your application and save it in package.json. Let’s say if the current version of the package is 1.3.2 then it will save the version with (^) sign. Here carot(^) means, it will support any higher version with major version 1 for eg. 1.2.2.
Without package.lock.json, there might be some differences in installed versions in different environments. To overcome this problem, package.lock.json is created to have the same results in every environment. It should be in source control with the package.json file because if any other user will clone the project and install dependencies then it will install the exact same dependencies as in package.lock.json to avoid differences.
package.json
It contains basic information about the project.
It is mandatory for every project.
It records important metadata about the project.
It contains information such as name, description, author, script, and dependencies.

package.lock.json
It describes the exact tree that was generated to allow subsequent installs to have the identical tree.
It is automatically generated for those operations where npm modifies either node_modules tree or package.json.
It allows future devs to install the same dependencies in the project.
It contains the name, dependencies, and locked version of the project. 

Q13.	Why should I not modify ‘package-lock.json’?
Ans-	It is a generated file and is not designed to be manually edited. Its purpose is to track the entire tree of dependencies (including dependencies of dependencies) and the exact version of each dependency. You should commit package-lock. json to your code repository.
Q14.	What is ‘node_modules’? Is it a good idea to push that on git?
Ans - You can think of the node_modules folder like a cache for the external modules that your project depends upon. When you install by ‘npm install’ , they are downloaded from the web and copied into the node_modules folder and Node. js is trained to look for them there when you import them (without a specific path).
It is not a good idea to push the entire npm_modules folder on git as it contains all the dependencies of your project and it simultaneously changes whenever you install any package or import dependencies. Rather than it is advisable to put the folder on your server during production.
Q15.	What is a ‘dist’ folder?
Ans-	The /dist folder contains the minimized version of the source code. The code present in the /dist folder is actually the code which is used on production web applications. Along with the minified code, the /dist folder also comprises all the compiled modules that may or may not be used with other systems.
Q16.	What is ‘browserlists’?
Ans-	Browserslist is a tool that allows specifying which browsers should be supported in your frontend app by specifying "queries" in a config file. It's used by frameworks/libraries such as React, Angular and Vue, but it's not limited to them.
Q17.	Difference between ^-caret and ~-tilda?
Ans-	npm uses the tilde (~) and caret (^) to designate which patch and minor versions to use respectively.
So if you see ~1.0.2 it means to install version 1.0.2 or the latest patch version such as 1.0.4. If you see ^1.0.2 it means to install version 1.0.2 or the latest minor or patch version such as 1.1.0.
Q18.	Script Types in HTML?
Ans-	

Attribute
Description
Compatibility
src
It specifies the URL of an external script file.
HTML 4.01, HTML5
type
It specifies the media type of the script.
HTML 4.01
async
It is a boolean value which specifies that the script is executed asynchronously.
HTML5
defer
It is a boolean value which is used to indicate that a script is executed after a document has been parsed.
HTML 4.01, HTML5


